// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/eksctl/pkg/karpenter/providers"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/client-go/discovery"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

type FakeRESTClientGetter struct {
	ToDiscoveryClientStub        func() (discovery.CachedDiscoveryInterface, error)
	toDiscoveryClientMutex       sync.RWMutex
	toDiscoveryClientArgsForCall []struct {
	}
	toDiscoveryClientReturns struct {
		result1 discovery.CachedDiscoveryInterface
		result2 error
	}
	toDiscoveryClientReturnsOnCall map[int]struct {
		result1 discovery.CachedDiscoveryInterface
		result2 error
	}
	ToRESTConfigStub        func() (*rest.Config, error)
	toRESTConfigMutex       sync.RWMutex
	toRESTConfigArgsForCall []struct {
	}
	toRESTConfigReturns struct {
		result1 *rest.Config
		result2 error
	}
	toRESTConfigReturnsOnCall map[int]struct {
		result1 *rest.Config
		result2 error
	}
	ToRESTMapperStub        func() (meta.RESTMapper, error)
	toRESTMapperMutex       sync.RWMutex
	toRESTMapperArgsForCall []struct {
	}
	toRESTMapperReturns struct {
		result1 meta.RESTMapper
		result2 error
	}
	toRESTMapperReturnsOnCall map[int]struct {
		result1 meta.RESTMapper
		result2 error
	}
	ToRawKubeConfigLoaderStub        func() clientcmd.ClientConfig
	toRawKubeConfigLoaderMutex       sync.RWMutex
	toRawKubeConfigLoaderArgsForCall []struct {
	}
	toRawKubeConfigLoaderReturns struct {
		result1 clientcmd.ClientConfig
	}
	toRawKubeConfigLoaderReturnsOnCall map[int]struct {
		result1 clientcmd.ClientConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRESTClientGetter) ToDiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
	fake.toDiscoveryClientMutex.Lock()
	ret, specificReturn := fake.toDiscoveryClientReturnsOnCall[len(fake.toDiscoveryClientArgsForCall)]
	fake.toDiscoveryClientArgsForCall = append(fake.toDiscoveryClientArgsForCall, struct {
	}{})
	stub := fake.ToDiscoveryClientStub
	fakeReturns := fake.toDiscoveryClientReturns
	fake.recordInvocation("ToDiscoveryClient", []interface{}{})
	fake.toDiscoveryClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRESTClientGetter) ToDiscoveryClientCallCount() int {
	fake.toDiscoveryClientMutex.RLock()
	defer fake.toDiscoveryClientMutex.RUnlock()
	return len(fake.toDiscoveryClientArgsForCall)
}

func (fake *FakeRESTClientGetter) ToDiscoveryClientCalls(stub func() (discovery.CachedDiscoveryInterface, error)) {
	fake.toDiscoveryClientMutex.Lock()
	defer fake.toDiscoveryClientMutex.Unlock()
	fake.ToDiscoveryClientStub = stub
}

func (fake *FakeRESTClientGetter) ToDiscoveryClientReturns(result1 discovery.CachedDiscoveryInterface, result2 error) {
	fake.toDiscoveryClientMutex.Lock()
	defer fake.toDiscoveryClientMutex.Unlock()
	fake.ToDiscoveryClientStub = nil
	fake.toDiscoveryClientReturns = struct {
		result1 discovery.CachedDiscoveryInterface
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTClientGetter) ToDiscoveryClientReturnsOnCall(i int, result1 discovery.CachedDiscoveryInterface, result2 error) {
	fake.toDiscoveryClientMutex.Lock()
	defer fake.toDiscoveryClientMutex.Unlock()
	fake.ToDiscoveryClientStub = nil
	if fake.toDiscoveryClientReturnsOnCall == nil {
		fake.toDiscoveryClientReturnsOnCall = make(map[int]struct {
			result1 discovery.CachedDiscoveryInterface
			result2 error
		})
	}
	fake.toDiscoveryClientReturnsOnCall[i] = struct {
		result1 discovery.CachedDiscoveryInterface
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTClientGetter) ToRESTConfig() (*rest.Config, error) {
	fake.toRESTConfigMutex.Lock()
	ret, specificReturn := fake.toRESTConfigReturnsOnCall[len(fake.toRESTConfigArgsForCall)]
	fake.toRESTConfigArgsForCall = append(fake.toRESTConfigArgsForCall, struct {
	}{})
	stub := fake.ToRESTConfigStub
	fakeReturns := fake.toRESTConfigReturns
	fake.recordInvocation("ToRESTConfig", []interface{}{})
	fake.toRESTConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRESTClientGetter) ToRESTConfigCallCount() int {
	fake.toRESTConfigMutex.RLock()
	defer fake.toRESTConfigMutex.RUnlock()
	return len(fake.toRESTConfigArgsForCall)
}

func (fake *FakeRESTClientGetter) ToRESTConfigCalls(stub func() (*rest.Config, error)) {
	fake.toRESTConfigMutex.Lock()
	defer fake.toRESTConfigMutex.Unlock()
	fake.ToRESTConfigStub = stub
}

func (fake *FakeRESTClientGetter) ToRESTConfigReturns(result1 *rest.Config, result2 error) {
	fake.toRESTConfigMutex.Lock()
	defer fake.toRESTConfigMutex.Unlock()
	fake.ToRESTConfigStub = nil
	fake.toRESTConfigReturns = struct {
		result1 *rest.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTClientGetter) ToRESTConfigReturnsOnCall(i int, result1 *rest.Config, result2 error) {
	fake.toRESTConfigMutex.Lock()
	defer fake.toRESTConfigMutex.Unlock()
	fake.ToRESTConfigStub = nil
	if fake.toRESTConfigReturnsOnCall == nil {
		fake.toRESTConfigReturnsOnCall = make(map[int]struct {
			result1 *rest.Config
			result2 error
		})
	}
	fake.toRESTConfigReturnsOnCall[i] = struct {
		result1 *rest.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTClientGetter) ToRESTMapper() (meta.RESTMapper, error) {
	fake.toRESTMapperMutex.Lock()
	ret, specificReturn := fake.toRESTMapperReturnsOnCall[len(fake.toRESTMapperArgsForCall)]
	fake.toRESTMapperArgsForCall = append(fake.toRESTMapperArgsForCall, struct {
	}{})
	stub := fake.ToRESTMapperStub
	fakeReturns := fake.toRESTMapperReturns
	fake.recordInvocation("ToRESTMapper", []interface{}{})
	fake.toRESTMapperMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRESTClientGetter) ToRESTMapperCallCount() int {
	fake.toRESTMapperMutex.RLock()
	defer fake.toRESTMapperMutex.RUnlock()
	return len(fake.toRESTMapperArgsForCall)
}

func (fake *FakeRESTClientGetter) ToRESTMapperCalls(stub func() (meta.RESTMapper, error)) {
	fake.toRESTMapperMutex.Lock()
	defer fake.toRESTMapperMutex.Unlock()
	fake.ToRESTMapperStub = stub
}

func (fake *FakeRESTClientGetter) ToRESTMapperReturns(result1 meta.RESTMapper, result2 error) {
	fake.toRESTMapperMutex.Lock()
	defer fake.toRESTMapperMutex.Unlock()
	fake.ToRESTMapperStub = nil
	fake.toRESTMapperReturns = struct {
		result1 meta.RESTMapper
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTClientGetter) ToRESTMapperReturnsOnCall(i int, result1 meta.RESTMapper, result2 error) {
	fake.toRESTMapperMutex.Lock()
	defer fake.toRESTMapperMutex.Unlock()
	fake.ToRESTMapperStub = nil
	if fake.toRESTMapperReturnsOnCall == nil {
		fake.toRESTMapperReturnsOnCall = make(map[int]struct {
			result1 meta.RESTMapper
			result2 error
		})
	}
	fake.toRESTMapperReturnsOnCall[i] = struct {
		result1 meta.RESTMapper
		result2 error
	}{result1, result2}
}

func (fake *FakeRESTClientGetter) ToRawKubeConfigLoader() clientcmd.ClientConfig {
	fake.toRawKubeConfigLoaderMutex.Lock()
	ret, specificReturn := fake.toRawKubeConfigLoaderReturnsOnCall[len(fake.toRawKubeConfigLoaderArgsForCall)]
	fake.toRawKubeConfigLoaderArgsForCall = append(fake.toRawKubeConfigLoaderArgsForCall, struct {
	}{})
	stub := fake.ToRawKubeConfigLoaderStub
	fakeReturns := fake.toRawKubeConfigLoaderReturns
	fake.recordInvocation("ToRawKubeConfigLoader", []interface{}{})
	fake.toRawKubeConfigLoaderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRESTClientGetter) ToRawKubeConfigLoaderCallCount() int {
	fake.toRawKubeConfigLoaderMutex.RLock()
	defer fake.toRawKubeConfigLoaderMutex.RUnlock()
	return len(fake.toRawKubeConfigLoaderArgsForCall)
}

func (fake *FakeRESTClientGetter) ToRawKubeConfigLoaderCalls(stub func() clientcmd.ClientConfig) {
	fake.toRawKubeConfigLoaderMutex.Lock()
	defer fake.toRawKubeConfigLoaderMutex.Unlock()
	fake.ToRawKubeConfigLoaderStub = stub
}

func (fake *FakeRESTClientGetter) ToRawKubeConfigLoaderReturns(result1 clientcmd.ClientConfig) {
	fake.toRawKubeConfigLoaderMutex.Lock()
	defer fake.toRawKubeConfigLoaderMutex.Unlock()
	fake.ToRawKubeConfigLoaderStub = nil
	fake.toRawKubeConfigLoaderReturns = struct {
		result1 clientcmd.ClientConfig
	}{result1}
}

func (fake *FakeRESTClientGetter) ToRawKubeConfigLoaderReturnsOnCall(i int, result1 clientcmd.ClientConfig) {
	fake.toRawKubeConfigLoaderMutex.Lock()
	defer fake.toRawKubeConfigLoaderMutex.Unlock()
	fake.ToRawKubeConfigLoaderStub = nil
	if fake.toRawKubeConfigLoaderReturnsOnCall == nil {
		fake.toRawKubeConfigLoaderReturnsOnCall = make(map[int]struct {
			result1 clientcmd.ClientConfig
		})
	}
	fake.toRawKubeConfigLoaderReturnsOnCall[i] = struct {
		result1 clientcmd.ClientConfig
	}{result1}
}

func (fake *FakeRESTClientGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.toDiscoveryClientMutex.RLock()
	defer fake.toDiscoveryClientMutex.RUnlock()
	fake.toRESTConfigMutex.RLock()
	defer fake.toRESTConfigMutex.RUnlock()
	fake.toRESTMapperMutex.RLock()
	defer fake.toRESTMapperMutex.RUnlock()
	fake.toRawKubeConfigLoaderMutex.RLock()
	defer fake.toRawKubeConfigLoaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRESTClientGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.RESTClientGetter = new(FakeRESTClientGetter)
